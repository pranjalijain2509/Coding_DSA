#Inorder Traversal
#it is left root right
#time compplexity - theta(n) that is visiting evvery node once and doing constant amount of work
#space complexity - theta(h)
#h is the height of tree 
#height is no of nodes and in function stack we will have max of h+1 call
#if height is no of edges and in function stack we will have max of h+2 call

class node:
    def __init__(self,k):
        self.left=None
        self.right=None
        self.data=k
def inorder(root):
    if root!=None:
        inorder(root.left)
        print(root.data)
        inorder(root.right)
root=node(10)
root.left=node(20)
root.right=node(30)
root.right.left=node(40)
root.right.right=node(50)
inorder(root)

Output-
20
10
40
30
50
