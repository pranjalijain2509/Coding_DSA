#Insert in BST - iterative solution
#Time complexity is big o(h) in the worst case because it has to go till th height to search an item but it could be costant if root in the only element to search
#space complexity is big o(1) because it is an iterative solution
#root will change only when tree is empty in no other case it will change

class node:
    def __init__(self,k):
        self.left=None
        self.right=None
        self.data=k
def insert_iter(root,key):
    parent=None
    cur=root
    while cur!=None:
        parent=cur
        if cur.data==key:
            return root
        elif cur.data>key:
            cur=cur.left
        else:
            cur=cur.right
    if parent==None:
        return node(key)
    elif parent.data>key:
        parent.left=node(key)
    else:
        parent.right=node(key)
    return root
def printl(root):
    if root is None:
        return
    printl(root.left)
    print(root.data)
    printl(root.right)
root=None
root=insert_iter(root,50)
root=insert_iter(root,40)
root=insert_iter(root,60)
root=insert_iter(root,90)
root=insert_iter(root,20)
printl(root)

Output-
20
40
50
60
90
